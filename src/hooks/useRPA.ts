/**
 * React Hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RPA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */

import { useState, useEffect, useCallback } from 'react';
import { rpaApi, RPAAccount, RPAScenario, RPATask } from '../services/rpaApi';
import { toast } from 'sonner';

interface UseRPAReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isConnected: boolean;
  isLoading: boolean;
  activeProfiles: any[];
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  testAccount: (account: RPAAccount) => Promise<boolean>;
  createMultiloginProfile: (account: RPAAccount) => Promise<string | null>;
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  executeScenario: (scenario: RPAScenario, accounts: RPAAccount[]) => Promise<any[]>;
  executeSingleScenario: (scenario: RPAScenario, account: RPAAccount) => Promise<any>;
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  getTaskStatus: (taskId: string) => Promise<any>;
  stopTask: (taskId: string) => Promise<boolean>;
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Multilogin
  startProfile: (profileId: string) => Promise<boolean>;
  stopProfile: (profileId: string) => Promise<boolean>;
  refreshActiveProfiles: () => Promise<void>;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  checkConnection: () => Promise<boolean>;
}

export const useRPA = (): UseRPAReturn => {
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [activeProfiles, setActiveProfiles] = useState<any[]>([]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPA API
  const checkConnection = useCallback(async (): Promise<boolean> => {
    try {
      const health = await rpaApi.getHealth();
      const connected = health.status === 'ok';
      setIsConnected(connected);
      
      if (connected) {
        console.log('‚úÖ RPA API –ø–æ–¥–∫–ª—é—á–µ–Ω:', health);
      } else {
        console.warn('‚ö†Ô∏è RPA API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      return connected;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPA API:', error);
      setIsConnected(false);
      return false;
    }
  }, []);

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
  const testAccount = useCallback(async (account: RPAAccount): Promise<boolean> => {
    setIsLoading(true);
    try {
      toast.info(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.username}...`);
      
      const result = await rpaApi.testAccount(account);
      
      if (result.success) {
        toast.success(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${account.username} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        return true;
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.username}`);
      return false;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ Multilogin –ø—Ä–æ—Ñ–∏–ª—è
  const createMultiloginProfile = useCallback(async (account: RPAAccount): Promise<string | null> => {
    setIsLoading(true);
    try {
      toast.info(`üîß –°–æ–∑–¥–∞–Ω–∏–µ Multilogin –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${account.username}...`);
      
      const result = await rpaApi.createMultiloginProfile(account);
      
      if (result.success && result.profile_id) {
        toast.success(`‚úÖ Multilogin –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${result.profile_id}`);
        return result.profile_id;
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        return null;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Multilogin –ø—Ä–æ—Ñ–∏–ª—è:', error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${account.username}`);
      return null;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ–¥–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
  const executeSingleScenario = useCallback(async (scenario: RPAScenario, account: RPAAccount): Promise<any> => {
    setIsLoading(true);
    try {
      toast.info(`üöÄ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}" –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ ${account.username}...`);
      
      const task: RPATask = {
        taskId: `single-${scenario.id}-${account.id}-${Date.now()}`,
        scenario: {
          steps: rpaApi.convertVisualStepsToRPA(scenario.steps)
        },
        account,
      };

      const result = await rpaApi.executeScenario(task);
      
      if (result.success) {
        toast.success(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è:', error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}"`);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ú–∞—Å—Å–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  const executeScenario = useCallback(async (scenario: RPAScenario, accounts: RPAAccount[]): Promise<any[]> => {
    setIsLoading(true);
    try {
      toast.info(`üöÄ –ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}" –Ω–∞ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö...`);
      
      const results = await rpaApi.executeBulkScenario(scenario, accounts);
      
      const successCount = results.filter(r => r.success).length;
      const errorCount = results.length - successCount;
      
      if (errorCount === 0) {
        toast.success(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ –≤—Å–µ—Ö ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö`);
      } else {
        toast.warning(`‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
      }
      
      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è:', error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}"`);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  const getTaskStatus = useCallback(async (taskId: string): Promise<any> => {
    try {
      return await rpaApi.getTaskStatus(taskId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
      return null;
    }
  }, []);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
  const stopTask = useCallback(async (taskId: string): Promise<boolean> => {
    try {
      const result = await rpaApi.stopTask(taskId);
      
      if (result.success) {
        toast.success(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        return true;
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: ${result.error}`);
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏:', error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ ${taskId}`);
      return false;
    }
  }, []);

  // –ó–∞–ø—É—Å–∫ Multilogin –ø—Ä–æ—Ñ–∏–ª—è
  const startProfile = useCallback(async (profileId: string): Promise<boolean> => {
    try {
      toast.info(`üöÄ –ó–∞–ø—É—Å–∫ Multilogin –ø—Ä–æ—Ñ–∏–ª—è ${profileId}...`);
      
      const result = await rpaApi.startMultiloginProfile(profileId);
      
      if (result.success) {
        toast.success(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${profileId} –∑–∞–ø—É—â–µ–Ω`);
        await refreshActiveProfiles();
        return true;
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${result.error}`);
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`);
      return false;
    }
  }, []);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Multilogin –ø—Ä–æ—Ñ–∏–ª—è
  const stopProfile = useCallback(async (profileId: string): Promise<boolean> => {
    try {
      toast.info(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Multilogin –ø—Ä–æ—Ñ–∏–ª—è ${profileId}...`);
      
      const result = await rpaApi.stopMultiloginProfile(profileId);
      
      if (result.success) {
        toast.success(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${profileId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        await refreshActiveProfiles();
        return true;
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${result.error}`);
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`);
      return false;
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
  const refreshActiveProfiles = useCallback(async (): Promise<void> => {
    try {
      const profiles = await rpaApi.getActiveProfiles();
      setActiveProfiles(profiles || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
      setActiveProfiles([]);
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    checkConnection();
    refreshActiveProfiles();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const interval = setInterval(() => {
      checkConnection();
      refreshActiveProfiles();
    }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    return () => clearInterval(interval);
  }, [checkConnection, refreshActiveProfiles]);

  return {
    isConnected,
    isLoading,
    activeProfiles,
    testAccount,
    createMultiloginProfile,
    executeScenario,
    executeSingleScenario,
    getTaskStatus,
    stopTask,
    startProfile,
    stopProfile,
    refreshActiveProfiles,
    checkConnection,
  };
};

