class AIOrchestra {
    constructor() {
        this.windows = [];
        this.maxWindows = 6;
        this.chatVisible = false;
        this.routingRules = [];
        this.messageHistory = [];
        
        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑—ã–≤–Ω—ã–µ –¥–ª—è –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤
        this.defaultCallsigns = [
            'GPT', 'CLAUDE', 'BARD', 'BING', 'PERPLX', 'GEMINI'
        ];
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ò–ò-—Å–µ—Ä–≤–∏—Å—ã
        this.aiServices = [
            { name: 'ChatGPT', url: 'https://chat.openai.com', callsign: 'GPT' },
            { name: 'Claude', url: 'https://claude.ai', callsign: 'CLAUDE' },
            { name: 'Bard', url: 'https://bard.google.com', callsign: 'BARD' },
            { name: 'Bing Chat', url: 'https://bing.com/chat', callsign: 'BING' },
            { name: 'Perplexity', url: 'https://perplexity.ai', callsign: 'PERPLX' },
            { name: 'Gemini', url: 'https://gemini.google.com', callsign: 'GEMINI' }
        ];
        
        this.initializeEventListeners();
        this.loadSettings();
        this.addInitialWindow();
    }
    
    initializeEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('addWindow').addEventListener('click', () => this.addWindow());
        document.getElementById('toggleChat').addEventListener('click', () => this.toggleChat());
        document.getElementById('settings').addEventListener('click', () => this.openSettings());
        document.getElementById('closeSettings').addEventListener('click', () => this.closeSettings());
        
        // –ß–∞—Ç
        document.getElementById('sendMessage').addEventListener('click', () => this.sendMessage());
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
        document.getElementById('clearChat').addEventListener('click', () => this.clearChat());
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        document.getElementById('addRule').addEventListener('click', () => this.addRoutingRule());
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'n':
                        e.preventDefault();
                        this.addWindow();
                        break;
                    case 'm':
                        e.preventDefault();
                        this.toggleChat();
                        break;
                    case ',':
                        e.preventDefault();
                        this.openSettings();
                        break;
                }
            }
        });
    }
    
    addWindow(service = null) {
        if (this.windows.length >= this.maxWindows) {
            this.showMessage('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω (6)', 'system');
            return;
        }
        
        const windowId = 'window-' + Date.now();
        const callsign = service ? service.callsign : this.defaultCallsigns[this.windows.length];
        const url = service ? service.url : '';
        
        const windowData = {
            id: windowId,
            callsign: callsign,
            url: url,
            title: service ? service.name : `–û–∫–Ω–æ ${this.windows.length + 1}`
        };
        
        this.windows.push(windowData);
        this.createWindowElement(windowData);
        this.updateGridLayout();
        this.updateSettingsCallsigns();
        
        this.showMessage(`–°–æ–∑–¥–∞–Ω–æ –æ–∫–Ω–æ "${callsign}"`, 'system');
    }
    
    createWindowElement(windowData) {
        const container = document.getElementById('windowsContainer');
        
        const windowEl = document.createElement('div');
        windowEl.className = 'browser-window';
        windowEl.id = windowData.id;
        
        windowEl.innerHTML = `
            <div class="window-header">
                <div class="window-title">
                    <span class="callsign" contenteditable="true">${windowData.callsign}</span>
                    <span class="window-name">${windowData.title}</span>
                </div>
                <input type="text" class="url-bar" placeholder="–í–≤–µ–¥–∏—Ç–µ URL..." value="${windowData.url}">
                <div class="window-controls">
                    <button class="control-btn minimize-btn" onclick="aiOrchestra.minimizeWindow('${windowData.id}')"></button>
                    <button class="control-btn close-btn" onclick="aiOrchestra.closeWindow('${windowData.id}')"></button>
                </div>
            </div>
            <div class="window-content">
                <div class="iframe-placeholder">
                    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: #666;">
                        <h3>ü§ñ ${windowData.title}</h3>
                        <p>–í–≤–µ–¥–∏—Ç–µ URL –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ</p>
                        <div style="margin-top: 1rem;">
                            <p>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ò–ò-—Å–µ—Ä–≤–∏—Å—ã:</p>
                            <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 0.5rem; justify-content: center;">
                                ${this.aiServices.map(service => 
                                    `<button class="btn btn-small" onclick="aiOrchestra.loadService('${windowData.id}', '${service.url}')">${service.name}</button>`
                                ).join('')}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        container.appendChild(windowEl);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–∫–Ω–∞
        const urlBar = windowEl.querySelector('.url-bar');
        urlBar.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.loadURL(windowData.id, e.target.value);
            }
        });
        
        const callsignEl = windowEl.querySelector('.callsign');
        callsignEl.addEventListener('blur', (e) => {
            this.updateCallsign(windowData.id, e.target.textContent);
        });
    }
    
    loadService(windowId, url) {
        const urlBar = document.querySelector(`#${windowId} .url-bar`);
        urlBar.value = url;
        this.loadURL(windowId, url);
    }
    
    loadURL(windowId, url) {
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }
        
        const windowEl = document.getElementById(windowId);
        const content = windowEl.querySelector('.window-content');
        
        // –°–æ–∑–¥–∞–µ–º iframe –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ URL
        content.innerHTML = `
            <iframe class="iframe-container" src="${url}" sandbox="allow-scripts allow-same-origin allow-forms allow-popups"></iframe>
        `;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–∫–Ω–∞
        const windowData = this.windows.find(w => w.id === windowId);
        if (windowData) {
            windowData.url = url;
        }
        
        this.showMessage(`–ó–∞–≥—Ä—É–∂–µ–Ω URL –≤ –æ–∫–Ω–µ "${windowData.callsign}": ${url}`, 'system');
    }
    
    closeWindow(windowId) {
        const windowIndex = this.windows.findIndex(w => w.id === windowId);
        if (windowIndex === -1) return;
        
        const windowData = this.windows[windowIndex];
        this.windows.splice(windowIndex, 1);
        
        const windowEl = document.getElementById(windowId);
        windowEl.remove();
        
        this.updateGridLayout();
        this.updateSettingsCallsigns();
        this.showMessage(`–ó–∞–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ "${windowData.callsign}"`, 'system');
    }
    
    minimizeWindow(windowId) {
        const windowEl = document.getElementById(windowId);
        windowEl.style.display = windowEl.style.display === 'none' ? 'flex' : 'none';
    }
    
    updateCallsign(windowId, newCallsign) {
        const windowData = this.windows.find(w => w.id === windowId);
        if (windowData) {
            const oldCallsign = windowData.callsign;
            windowData.callsign = newCallsign.toUpperCase();
            this.updateSettingsCallsigns();
            this.showMessage(`–ò–∑–º–µ–Ω–µ–Ω –ø–æ–∑—ã–≤–Ω–æ–π —Å "${oldCallsign}" –Ω–∞ "${windowData.callsign}"`, 'system');
        }
    }
    
    updateGridLayout() {
        const container = document.getElementById('windowsContainer');
        const count = this.windows.length;
        
        container.className = 'windows-container';
        
        if (count === 1) container.classList.add('single');
        else if (count === 2) container.classList.add('dual');
        else if (count === 3) container.classList.add('triple');
        else if (count === 4) container.classList.add('quad');
        else if (count === 5) container.classList.add('five');
        else if (count === 6) container.classList.add('six');
    }
    
    toggleChat() {
        const chatPanel = document.getElementById('chatPanel');
        this.chatVisible = !this.chatVisible;
        
        if (this.chatVisible) {
            chatPanel.classList.remove('hidden');
        } else {
            chatPanel.classList.add('hidden');
        }
    }
    
    sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();
        
        if (!message) return;
        
        input.value = '';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        if (message.startsWith('@')) {
            this.processRoutingCommand(message);
        } else {
            this.showMessage(message, 'user');
        }
        
        this.messageHistory.push({
            content: message,
            type: 'user',
            timestamp: new Date()
        });
    }
    
    processRoutingCommand(message) {
        const parts = message.split(' ');
        const command = parts[0];
        const content = parts.slice(1).join(' ');
        
        if (command === '@all') {
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –æ–∫–Ω–∞–º
            this.broadcastToAll(content);
        } else if (command.startsWith('@') && command.length > 1) {
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–∫–Ω—É
            const targetCallsign = command.substring(1).toUpperCase();
            this.sendToWindow(targetCallsign, content);
        } else {
            this.showMessage('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–ø–æ–∑—ã–≤–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @all —Å–æ–æ–±—â–µ–Ω–∏–µ', 'system');
        }
    }
    
    broadcastToAll(message) {
        this.windows.forEach(window => {
            this.simulateMessageToWindow(window.callsign, message);
        });
        
        this.showMessage(`üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º (${this.windows.length} –æ–∫–æ–Ω): ${message}`, 'forwarded');
    }
    
    sendToWindow(callsign, message) {
        const targetWindow = this.windows.find(w => w.callsign === callsign);
        
        if (targetWindow) {
            this.simulateMessageToWindow(callsign, message);
            this.showMessage(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ "${callsign}": ${message}`, 'forwarded');
        } else {
            this.showMessage(`‚ùå –û–∫–Ω–æ —Å –ø–æ–∑—ã–≤–Ω—ã–º "${callsign}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, 'system');
        }
    }
    
    simulateMessageToWindow(callsign, message) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ iframe
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${callsign}: ${message}`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —á–µ—Ä–µ–∑ API –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é)
        setTimeout(() => {
            this.showMessage(`ü§ñ ${callsign} –ø–æ–ª—É—á–∏–ª: "${message}"`, 'system');
        }, 1000);
    }
    
    showMessage(content, type = 'user', sender = null) {
        const chatMessages = document.getElementById('chatMessages');
        const messageEl = document.createElement('div');
        messageEl.className = `message ${type}`;
        
        const timestamp = new Date().toLocaleTimeString();
        const header = sender ? `${sender} (${timestamp})` : timestamp;
        
        messageEl.innerHTML = `
            <div class="message-header">${header}</div>
            <div class="message-content">${content}</div>
        `;
        
        chatMessages.appendChild(messageEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    clearChat() {
        document.getElementById('chatMessages').innerHTML = '';
        this.messageHistory = [];
        this.showMessage('–ß–∞—Ç –æ—á–∏—â–µ–Ω', 'system');
    }
    
    openSettings() {
        document.getElementById('settingsModal').classList.remove('hidden');
        this.updateSettingsUI();
    }
    
    closeSettings() {
        document.getElementById('settingsModal').classList.add('hidden');
        this.saveSettings();
    }
    
    updateSettingsUI() {
        this.updateSettingsCallsigns();
        this.updateRoutingRules();
    }
    
    updateSettingsCallsigns() {
        const container = document.getElementById('windowCallsigns');
        container.innerHTML = '';
        
        this.windows.forEach(window => {
            const callsignEl = document.createElement('div');
            callsignEl.className = 'callsign-input';
            callsignEl.innerHTML = `
                <span>–û–∫–Ω–æ "${window.title}":</span>
                <input type="text" value="${window.callsign}" onchange="aiOrchestra.updateWindowCallsign('${window.id}', this.value)">
            `;
            container.appendChild(callsignEl);
        });
    }
    
    updateWindowCallsign(windowId, newCallsign) {
        this.updateCallsign(windowId, newCallsign);
        const windowEl = document.getElementById(windowId);
        const callsignEl = windowEl.querySelector('.callsign');
        callsignEl.textContent = newCallsign.toUpperCase();
    }
    
    addRoutingRule() {
        const rule = {
            id: 'rule-' + Date.now(),
            from: '',
            to: '',
            trigger: '',
            action: 'forward'
        };
        
        this.routingRules.push(rule);
        this.updateRoutingRules();
    }
    
    updateRoutingRules() {
        const container = document.getElementById('routingRules');
        container.innerHTML = '';
        
        this.routingRules.forEach(rule => {
            const ruleEl = document.createElement('div');
            ruleEl.className = 'routing-rule';
            ruleEl.innerHTML = `
                <div class="rule-content">
                    <div style="margin-bottom: 0.5rem;">
                        <label>–¢—Ä–∏–≥–≥–µ—Ä:</label>
                        <input type="text" value="${rule.trigger}" placeholder="–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞" style="width: 100%; padding: 0.25rem;">
                    </div>
                    <div style="display: flex; gap: 1rem;">
                        <div style="flex: 1;">
                            <label>–û—Ç:</label>
                            <select style="width: 100%; padding: 0.25rem;">
                                <option value="">–õ—é–±–æ–µ –æ–∫–Ω–æ</option>
                                ${this.windows.map(w => `<option value="${w.callsign}" ${rule.from === w.callsign ? 'selected' : ''}>${w.callsign}</option>`).join('')}
                            </select>
                        </div>
                        <div style="flex: 1;">
                            <label>–ö:</label>
                            <select style="width: 100%; padding: 0.25rem;">
                                <option value="all">–í—Å–µ–º</option>
                                ${this.windows.map(w => `<option value="${w.callsign}" ${rule.to === w.callsign ? 'selected' : ''}>${w.callsign}</option>`).join('')}
                            </select>
                        </div>
                    </div>
                </div>
                <button class="btn btn-small" onclick="aiOrchestra.removeRoutingRule('${rule.id}')" style="background: #ef4444; color: white;">–£–¥–∞–ª–∏—Ç—å</button>
            `;
            container.appendChild(ruleEl);
        });
    }
    
    removeRoutingRule(ruleId) {
        this.routingRules = this.routingRules.filter(rule => rule.id !== ruleId);
        this.updateRoutingRules();
    }
    
    addInitialWindow() {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –æ–∫–Ω–æ —Å ChatGPT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.addWindow(this.aiServices[0]);
    }
    
    loadSettings() {
        try {
            const saved = localStorage.getItem('aiOrchestra');
            if (saved) {
                const data = JSON.parse(saved);
                this.routingRules = data.routingRules || [];
                this.messageHistory = data.messageHistory || [];
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
        }
    }
    
    saveSettings() {
        try {
            const data = {
                routingRules: this.routingRules,
                messageHistory: this.messageHistory,
                windows: this.windows.map(w => ({
                    callsign: w.callsign,
                    url: w.url,
                    title: w.title
                }))
            };
            localStorage.setItem('aiOrchestra', JSON.stringify(data));
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let aiOrchestra;

document.addEventListener('DOMContentLoaded', () => {
    aiOrchestra = new AIOrchestra();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
        aiOrchestra.showMessage('üéº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Orchestra! –°–æ–∑–¥–∞–π—Ç–µ –¥–æ 6 –æ–∫–æ–Ω —Å –ò–ò-—Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–∏–º–∏.', 'system');
        aiOrchestra.showMessage('üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: @–ø–æ–∑—ã–≤–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–∫–Ω—É) –∏–ª–∏ @all —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º)', 'system');
        aiOrchestra.showMessage('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+N (–Ω–æ–≤–æ–µ –æ–∫–Ω–æ), Ctrl+M (—á–∞—Ç), Ctrl+, (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)', 'system');
    }, 1000);
});

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
window.addEventListener('beforeunload', () => {
    if (aiOrchestra) {
        aiOrchestra.saveSettings();
    }
});