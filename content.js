// Content script –¥–ª—è AI Orchestra
class AIOrchestraContent {
    constructor() {
        this.setupMessageListener();
        this.setupPageIntegration();
        this.detectAIService();
    }

    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            switch(request.type) {
                case 'AI_ORCHESTRA_MESSAGE':
                    this.handleIncomingMessage(request.message);
                    break;
                
                case 'AI_ORCHESTRA_BROADCAST':
                    this.handleBroadcastMessage(request.message);
                    break;
                
                case 'GET_PAGE_TEXT':
                    sendResponse({ text: this.getPageText() });
                    break;
                
                case 'INJECT_TEXT':
                    this.injectText(request.text);
                    sendResponse({ success: true });
                    break;
                
                case 'SIMULATE_INPUT':
                    this.simulateUserInput(request.text);
                    sendResponse({ success: true });
                    break;
                
                case 'AUTO_INJECT_AND_SEND':
                    this.autoInjectAndSend(request.message, request.source);
                    sendResponse({ success: true });
                    break;
            }
        });
    }

    autoInjectAndSend(message, source) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        this.showNotification(`üì® –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${source}: ${message.substring(0, 50)}...`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        setTimeout(() => {
            // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            this.injectText(message);
            
            // –ï—â–µ –æ–¥–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            setTimeout(() => {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const sendButton = document.querySelector(this.sendButtonSelector);
                if (sendButton && !sendButton.disabled) {
                    sendButton.click();
                    console.log(`üöÄ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ ${this.getServiceName()}: ${message.substring(0, 50)}...`);
                } else {
                    console.log(`‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ${this.getServiceName()}`);
                }
            }, 1000 + Math.random() * 2000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1-3 —Å–µ–∫—É–Ω–¥—ã
        }, 500 + Math.random() * 1000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 0.5-1.5 —Å–µ–∫—É–Ω–¥—ã
    }

    setupPageIntegration() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä AI Orchestra –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        this.addOrchestraIndicator();
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
        this.observePageChanges();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        this.setupHotkeys();
    }

    detectAIService() {
        const url = window.location.hostname;
        let serviceType = 'unknown';
        
        if (url.includes('openai.com') || url.includes('chat.openai.com')) {
            serviceType = 'chatgpt';
        } else if (url.includes('claude.ai')) {
            serviceType = 'claude';
        } else if (url.includes('bard.google.com')) {
            serviceType = 'bard';
        } else if (url.includes('bing.com')) {
            serviceType = 'bing';
        } else if (url.includes('perplexity.ai')) {
            serviceType = 'perplexity';
        }
        
        this.serviceType = serviceType;
        this.setupServiceSpecificIntegration();
    }

    setupServiceSpecificIntegration() {
        switch(this.serviceType) {
            case 'chatgpt':
                this.setupChatGPTIntegration();
                break;
            case 'claude':
                this.setupClaudeIntegration();
                break;
            case 'bard':
                this.setupBardIntegration();
                break;
            case 'bing':
                this.setupBingIntegration();
                break;
            case 'perplexity':
                this.setupPerplexityIntegration();
                break;
        }
    }

    setupChatGPTIntegration() {
        this.inputSelector = 'textarea[data-id]';
        this.sendButtonSelector = 'button[data-testid="send-button"]';
        this.messagesSelector = '[data-message-author-role]';
    }

    setupClaudeIntegration() {
        this.inputSelector = 'div[contenteditable="true"]';
        this.sendButtonSelector = 'button[aria-label="Send Message"]';
        this.messagesSelector = '.font-claude-message';
    }

    setupBardIntegration() {
        this.inputSelector = 'rich-textarea textarea';
        this.sendButtonSelector = 'button[aria-label="Send message"]';
        this.messagesSelector = '.model-response-text';
    }

    setupBingIntegration() {
        this.inputSelector = '#searchbox';
        this.sendButtonSelector = '#search_icon';
        this.messagesSelector = '.ac-textBlock';
    }

    setupPerplexityIntegration() {
        this.inputSelector = 'textarea[placeholder*="Ask"]';
        this.sendButtonSelector = 'button[aria-label="Submit"]';
        this.messagesSelector = '.prose';
    }

    addOrchestraIndicator() {
        const indicator = document.createElement('div');
        indicator.id = 'ai-orchestra-indicator';
        indicator.innerHTML = 'üéº';
        indicator.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            z-index: 10000;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
        `;
        
        indicator.addEventListener('click', () => {
            this.showOrchestraPanel();
        });
        
        indicator.addEventListener('mouseenter', () => {
            indicator.style.transform = 'scale(1.1)';
        });
        
        indicator.addEventListener('mouseleave', () => {
            indicator.style.transform = 'scale(1)';
        });
        
        document.body.appendChild(indicator);
    }

    showOrchestraPanel() {
        if (document.getElementById('ai-orchestra-panel')) {
            document.getElementById('ai-orchestra-panel').remove();
            return;
        }

        const panel = document.createElement('div');
        panel.id = 'ai-orchestra-panel';
        panel.style.cssText = `
            position: fixed;
            top: 60px;
            right: 10px;
            width: 300px;
            max-height: 400px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            z-index: 10001;
            padding: 1rem;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        `;
        
        panel.innerHTML = `
            <div style="border-bottom: 1px solid #eee; padding-bottom: 0.5rem; margin-bottom: 1rem;">
                <h3 style="margin: 0; color: #333;">üéº AI Orchestra</h3>
                <p style="margin: 0.5rem 0 0 0; font-size: 0.875rem; color: #666;">
                    –°–µ—Ä–≤–∏—Å: ${this.getServiceName()}
                </p>
            </div>
            
            <div style="margin-bottom: 1rem;">
                <label style="display: block; font-weight: bold; margin-bottom: 0.5rem;">
                    –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:
                </label>
                <textarea id="quickMessage" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px; resize: vertical;" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."></textarea>
                <button id="sendQuickMessage" style="margin-top: 0.5rem; padding: 0.5rem 1rem; background: #4f46e5; color: white; border: none; border-radius: 4px; cursor: pointer; width: 100%;">
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
            </div>
            
            <div style="margin-bottom: 1rem;">
                <button id="extractText" style="padding: 0.5rem 1rem; background: #10b981; color: white; border: none; border-radius: 4px; cursor: pointer; width: 100%; margin-bottom: 0.5rem;">
                    üìã –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                </button>
                <button id="openOrchestra" style="padding: 0.5rem 1rem; background: #6b7280; color: white; border: none; border-radius: 4px; cursor: pointer; width: 100%;">
                    üéº –û—Ç–∫—Ä—ã—Ç—å Orchestra
                </button>
            </div>
        `;
        
        document.body.appendChild(panel);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('sendQuickMessage').addEventListener('click', () => {
            const text = document.getElementById('quickMessage').value;
            if (text.trim()) {
                this.simulateUserInput(text);
                document.getElementById('quickMessage').value = '';
            }
        });
        
        document.getElementById('extractText').addEventListener('click', () => {
            const text = this.getPageText();
            this.copyToClipboard(text);
            this.showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        });
        
        document.getElementById('openOrchestra').addEventListener('click', () => {
            chrome.runtime.sendMessage({ type: 'OPEN_ORCHESTRA' });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
        setTimeout(() => {
            document.addEventListener('click', (e) => {
                if (!panel.contains(e.target) && e.target.id !== 'ai-orchestra-indicator') {
                    panel.remove();
                }
            }, { once: true });
        }, 100);
    }

    getServiceName() {
        const names = {
            'chatgpt': 'ChatGPT',
            'claude': 'Claude',
            'bard': 'Bard',
            'bing': 'Bing Chat',
            'perplexity': 'Perplexity',
            'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å'
        };
        return names[this.serviceType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å';
    }

    observePageChanges() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length > 0) {
                    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    this.onNewContent(mutation.addedNodes);
                }
            });
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    onNewContent(addedNodes) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
        setTimeout(() => {
            this.detectAndForwardAIResponse(addedNodes);
        }, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    detectAndForwardAIResponse(addedNodes) {
        let newAIMessage = this.extractLatestAIMessage();
        
        if (newAIMessage && newAIMessage !== this.lastProcessedMessage) {
            this.lastProcessedMessage = newAIMessage;
            console.log(`ü§ñ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${this.getServiceName()}:`, newAIMessage);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Orchestra –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            this.forwardToOrchestra(newAIMessage);
        }
    }

    extractLatestAIMessage() {
        const messages = document.querySelectorAll(this.messagesSelector);
        if (messages.length === 0) return null;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò (–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        for (let i = messages.length - 1; i >= 0; i--) {
            const message = messages[i];
            if (this.isAIMessage(message)) {
                const text = message.textContent.trim();
                if (text.length > 10) { // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    return text;
                }
            }
        }
        return null;
    }

    isAIMessage(messageElement) {
        const text = messageElement.textContent.toLowerCase();
        const classList = messageElement.className.toLowerCase();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
        switch(this.serviceType) {
            case 'chatgpt':
                return messageElement.hasAttribute('data-message-author-role') && 
                       messageElement.getAttribute('data-message-author-role') === 'assistant';
            case 'claude':
                return classList.includes('claude') || classList.includes('assistant');
            case 'bard':
                return classList.includes('model-response') || classList.includes('response');
            case 'bing':
                return classList.includes('ac-textblock') && !classList.includes('user');
            case 'perplexity':
                return classList.includes('prose') && !messageElement.closest('[data-testid="user-message"]');
            default:
                // –û–±—â–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - –µ—Å–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return !classList.includes('user') && !classList.includes('human');
        }
    }

    forwardToOrchestra(message) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ localStorage
        const orchestraSettings = JSON.parse(localStorage.getItem('aiOrchestra') || '{}');
        const autoForwardRules = orchestraSettings.autoForwardRules || [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏
        autoForwardRules.forEach(rule => {
            if (this.matchesRule(message, rule)) {
                this.executeAutoForward(message, rule);
            }
        });
        
        // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –±—É—Ñ–µ—Ä Orchestra
        chrome.runtime.sendMessage({
            type: 'AI_RESPONSE_INTERCEPTED',
            source: this.getServiceName(),
            message: message,
            timestamp: Date.now(),
            url: window.location.href
        });
    }

    matchesRule(message, rule) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ –ø—Ä–∞–≤–∏–ª–æ
        if (rule.sourceService && rule.sourceService !== this.getServiceName()) {
            return false;
        }
        
        if (rule.trigger) {
            const trigger = rule.trigger.toLowerCase();
            return message.toLowerCase().includes(trigger);
        }
        
        return rule.autoForwardAll === true;
    }

    executeAutoForward(message, rule) {
        console.log(`üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞: ${this.getServiceName()} ‚Üí ${rule.targetService}`);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        const forwardedMessage = this.formatForwardedMessage(message, rule);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ background script
        chrome.runtime.sendMessage({
            type: 'AUTO_FORWARD_MESSAGE',
            targetService: rule.targetService,
            message: forwardedMessage,
            originalSource: this.getServiceName(),
            rule: rule
        });
        
        this.showNotification(`üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ ${rule.targetService}: ${message.substring(0, 50)}...`);
    }

    formatForwardedMessage(message, rule) {
        let formatted = message;
        
        if (rule.addSourcePrefix) {
            formatted = `[–û—Ç ${this.getServiceName()}]: ${formatted}`;
        }
        
        if (rule.addInstructions) {
            formatted = `${rule.instructions}\n\n${formatted}`;
        }
        
        if (rule.translateTo) {
            formatted = `–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ ${rule.translateTo}: ${formatted}`;
        }
        
        return formatted;
    }

    setupHotkeys() {
        document.addEventListener('keydown', (e) => {
            // Ctrl+Shift+O - –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å Orchestra
            if (e.ctrlKey && e.shiftKey && e.key === 'O') {
                e.preventDefault();
                this.showOrchestraPanel();
            }
            
            // Ctrl+Shift+C - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (e.ctrlKey && e.shiftKey && e.key === 'C') {
                e.preventDefault();
                const text = this.getPageText();
                this.copyToClipboard(text);
                this.showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
            }
        });
    }

    handleIncomingMessage(message) {
        this.showNotification(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.substring(0, 50)}...`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (confirm('–í—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞?')) {
            this.injectText(message);
        }
    }

    handleBroadcastMessage(message) {
        this.showNotification(`üì¢ Broadcast: ${message.substring(0, 50)}...`);
    }

    injectText(text) {
        const inputField = document.querySelector(this.inputSelector);
        if (inputField) {
            if (inputField.tagName === 'TEXTAREA' || inputField.tagName === 'INPUT') {
                inputField.value = text;
                inputField.dispatchEvent(new Event('input', { bubbles: true }));
            } else {
                // –î–ª—è contenteditable —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                inputField.textContent = text;
                inputField.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }
    }

    simulateUserInput(text) {
        this.injectText(text);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
            const sendButton = document.querySelector(this.sendButtonSelector);
            if (sendButton && !sendButton.disabled) {
                sendButton.click();
            }
        }, 500);
    }

    getPageText() {
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        const messages = document.querySelectorAll(this.messagesSelector);
        let text = '';
        
        messages.forEach((msg, index) => {
            const msgText = msg.textContent.trim();
            if (msgText) {
                text += `[–°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1}]\n${msgText}\n\n`;
            }
        });
        
        return text || document.body.textContent.substring(0, 5000);
    }

    copyToClipboard(text) {
        navigator.clipboard.writeText(text).catch(() => {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
        });
    }

    showNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 1rem;
            border-radius: 6px;
            z-index: 10002;
            max-width: 300px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease-out;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease-out';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è content script
new AIOrchestraContent();