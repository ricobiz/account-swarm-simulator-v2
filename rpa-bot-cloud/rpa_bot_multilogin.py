#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π RPA –±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Multilogin API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏
"""

import os
import sys
import json
import time
import logging
import traceback
from datetime import datetime
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import requests
import undetected_chromedriver as uc
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, WebDriverException
from multilogin_enhanced import MultiloginEnhanced

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/tmp/rpa_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://izmgzstdgoswlozinmyk.supabase.co')
SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_KEY', '')
MULTILOGIN_TOKEN = os.getenv('MULTILOGIN_TOKEN') # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ELEMENT_WAIT_TIMEOUT = 10

class MultiloginRPABot:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.multilogin = None
        self.current_profile_id = None
        self.current_account = None
        self.init_multilogin()
        
    def init_multilogin(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multilogin"""
        try:
            if MULTILOGIN_TOKEN:
                logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multilogin...")
                self.multilogin = MultiloginEnhanced(MULTILOGIN_TOKEN)
                
                if self.multilogin.check_connection():
                    logger.info("‚úÖ Multilogin —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                else:
                    logger.warning("‚ö†Ô∏è Multilogin API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω Multilogin –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Multilogin: {e}")

    def setup_browser(self, account_data=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å Multilogin –∏–ª–∏ fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Chrome"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥—Ä–∞–π–≤–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.driver:
                self.cleanup_browser()
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Multilogin
            if self.multilogin and account_data:
                logger.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Multilogin...")
                
                profile_id = self.multilogin.get_profile_for_account(account_data)
                if profile_id:
                    profile_info = self.multilogin.start_profile(profile_id)
                    if profile_info:
                        self.current_profile_id = profile_id
                        self.current_account = account_data
                        
                        driver = self.multilogin.get_selenium_driver(profile_id)
                        if driver:
                            self.driver = driver
                            self.wait = WebDriverWait(self.driver, ELEMENT_WAIT_TIMEOUT)
                            logger.info("‚úÖ Multilogin –±—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                            return True
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Chrome
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ Chrome...")
            return self.setup_regular_chrome()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return self.setup_regular_chrome()

    def setup_regular_chrome(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        try:
            options = Options()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            
            # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            options.add_argument('--disable-web-security')
            options.add_argument('--disable-features=VizDisplayCompositor')
            options.add_argument('--disable-extensions')
            options.add_argument('--disable-plugins')
            options.add_argument('--disable-images')
            options.add_argument('--disable-javascript')
            
            # User agent
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            
            self.driver = uc.Chrome(options=options)
            self.wait = WebDriverWait(self.driver, ELEMENT_WAIT_TIMEOUT)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ –û–±—ã—á–Ω—ã–π Chrome –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome: {e}")
            return False

    def cleanup_browser(self):
        """–û—á–∏—Å—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
                self.wait = None
                
            if self.multilogin and self.current_profile_id:
                self.multilogin.stop_profile(self.current_profile_id)
                self.current_profile_id = None
                
            self.current_account = None
            logger.info("üßπ –ë—Ä–∞—É–∑–µ—Ä –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    def execute_task(self, task_data):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
        try:
            task_id = task_data.get('id')
            account_data = task_data.get('account', {})
            actions = task_data.get('actions', [])
            
            logger.info(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data.get('username', 'unknown')}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if not self.setup_browser(account_data):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            results = []
            for i, action in enumerate(actions):
                try:
                    logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è {i+1}/{len(actions)}: {action.get('type')}")
                    result = self.execute_action(action)
                    results.append(result)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    time.sleep(action.get('delay', 1))
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {i+1}: {e}")
                    results.append({'success': False, 'error': str(e)}')
            
            # –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            success_count = sum(1 for r in results if r.get('success', False))
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π —É—Å–ø–µ—à–Ω–æ")
            
            return {
                'task_id': task_id,
                'success': success_count > 0,
                'results': results,
                'profile_id': self.current_profile_id,
                'account': account_data.get('username')
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return {
                'task_id': task_data.get('id'),
                'success': False,
                'error': str(e)
            }
        finally:
            self.cleanup_browser()

    def execute_action(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        action_type = action.get('type')
        
        try:
            if action_type == 'navigate':
                return self.action_navigate(action)
            elif action_type == 'click':
                return self.action_click(action)
            elif action_type == 'input':
                return self.action_input(action)
            elif action_type == 'wait':
                return self.action_wait(action)
            elif action_type == 'scroll':
                return self.action_scroll(action)
            elif action_type == 'screenshot':
                return self.action_screenshot(action)
            else:
                raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return {'success': False, 'error': str(e)}

    def action_navigate(self, action):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL"""
        url = action.get('url')
        self.driver.get(url)
        logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
        return {'success': True, 'url': url}

    def action_click(self, action):
        """–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É"""
        selector = action.get('selector')
        element = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
        element.click()
        logger.info(f"üëÜ –ö–ª–∏–∫ –ø–æ {selector}")
        return {'success': True, 'selector': selector}

    def action_input(self, action):
        """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        selector = action.get('selector')
        text = action.get('text')
        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
        element.clear()
        element.send_keys(text)
        logger.info(f"‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ {selector}")
        return {'success': True, 'selector': selector, 'text': '***'}

    def action_wait(self, action):
        """–û–∂–∏–¥–∞–Ω–∏–µ"""
        duration = action.get('duration', 1)
        time.sleep(duration)
        logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {duration} —Å–µ–∫")
        return {'success': True, 'duration': duration}

    def action_scroll(self, action):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        direction = action.get('direction', 'down')
        pixels = action.get('pixels', 500)
        
        if direction == 'down':
            self.driver.execute_script(f"window.scrollBy(0, {pixels});")
        else:
            self.driver.execute_script(f"window.scrollBy(0, -{pixels});")
            
        logger.info(f"üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {direction} –Ω–∞ {pixels}px")
        return {'success': True, 'direction': direction, 'pixels': pixels}

    def action_screenshot(self, action):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        filename = f"/tmp/screenshot_{int(time.time())}.png"
        self.driver.save_screenshot(filename)
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return {'success': True, 'filename': filename}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = MultiloginRPABot()

# API Endpoints

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.now().isoformat(),
        'version': '2.0.0',
        'environment': 'railway',
        'multilogin': {
            'available': bot.multilogin is not None,
            'connected': bot.multilogin.check_connection() if bot.multilogin else False
        }
    })

@app.route('/status', methods=['GET'])
def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    status = {
        'bot_ready': bot.driver is not None,
        'current_profile': bot.current_profile_id,
        'current_account': bot.current_account.get('username') if bot.current_account else None,
        'multilogin_status': 'connected' if bot.multilogin and bot.multilogin.check_connection() else 'disconnected'
    }
    
    if bot.multilogin:
        status['active_profiles'] = bot.multilogin.list_active_profiles()
        
    return jsonify(status)

@app.route('/execute', methods=['POST'])
def execute_task():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
    try:
        task_data = request.get_json()
        
        if not task_data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏'}), 400
            
        result = bot.execute_task(task_data)
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API execute: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/profiles', methods=['GET'])
def list_profiles():
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π Multilogin"""
    try:
        if not bot.multilogin:
            return jsonify({'error': 'Multilogin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}), 503
            
        profiles = bot.multilogin.get_profiles()
        return jsonify({'profiles': profiles})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/profiles', methods=['POST'])
def create_profile():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        if not bot.multilogin:
            return jsonify({'error': 'Multilogin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}), 503
            
        account_data = request.get_json()
        profile_id = bot.multilogin.create_profile(account_data)
        
        if profile_id:
            return jsonify({'profile_id': profile_id})
        else:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/profiles/<profile_id>/start', methods=['POST'])
def start_profile(profile_id):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        if not bot.multilogin:
            return jsonify({'error': 'Multilogin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}), 503
            
        result = bot.multilogin.start_profile(profile_id)
        
        if result:
            return jsonify(result)
        else:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/profiles/<profile_id>/stop', methods=['POST'])
def stop_profile(profile_id):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        if not bot.multilogin:
            return jsonify({'error': 'Multilogin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}), 503
            
        success = bot.multilogin.stop_profile(profile_id)
        
        if success:
            return jsonify({'success': True})
        else:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/cleanup', methods=['POST'])
def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        bot.cleanup_browser()
        
        if bot.multilogin:
            bot.multilogin.cleanup_all_profiles()
            
        return jsonify({'success': True})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RPA –±–æ—Ç–∞ —Å Multilogin –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('/tmp', exist_ok=True)
    
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)





