import React, { useState, useEffect, useRef } from 'react'
import './App.css'

// –ü—Ä–æ—Å—Ç—ã–µ –±–æ—Ç—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ò–ò
const botResponses = {
  alice: [
    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ê —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?",
    "–•–º, –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ...",
    "–°–æ–≥–ª–∞—Å–Ω–∞ —Å —Ç–æ–±–æ–π! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ.",
    "–ê —Ç—ã —Å–ª—ã—à–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏?",
    "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –º—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ.",
    "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –µ—ë –¥–∞–ª—å—à–µ.",
    "–ó–Ω–∞–µ—à—å, —è –¥—É–º–∞–ª–∞ –æ–± —ç—Ç–æ–º –∂–µ —Å–∞–º–æ–º!",
    "–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –º—ã—Å–ª–∏!"
  ],
  bob: [
    "–ü—Ä–∏–≤–µ—Ç! –í—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!",
    "–î–∞, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ê —Ç—ã –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å?",
    "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ.",
    "–°–æ–≥–ª–∞—Å–µ–Ω! –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
    "–î–∞, —è —Ç–æ–∂–µ –æ–± —ç—Ç–æ–º –¥—É–º–∞–ª!",
    "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
    "–î–∞, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –æ–±—Å—É–¥–∏—Ç—å.",
    "–û—Ç–ª–∏—á–Ω–∞—è –º—ã—Å–ª—å! –ö–∞–∫ –º—ã –º–æ–∂–µ–º —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –±–µ—Å–µ–¥—É!"
  ]
}

function App() {
  const [messages, setMessages] = useState({
    alice: [],
    bob: []
  })
  const [inputMessages, setInputMessages] = useState({
    alice: '',
    bob: ''
  })
  const [isAutoChat, setIsAutoChat] = useState(true)
  const [chatSpeed, setChatSpeed] = useState(3000) // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  const autoChatRef = useRef(null)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  useEffect(() => {
    if (isAutoChat) {
      autoChatRef.current = setInterval(() => {
        const lastMessage = messages.alice.length > 0 ? messages.alice[messages.alice.length - 1] : null
        
        // Alice –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Bob
        if (lastMessage && lastMessage.sender === 'bob') {
          const response = botResponses.alice[Math.floor(Math.random() * botResponses.alice.length)]
          addMessage('alice', response, 'alice')
        } else {
          // Alice –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä
          const response = botResponses.alice[Math.floor(Math.random() * botResponses.alice.length)]
          addMessage('alice', response, 'alice')
        }
      }, chatSpeed)
    } else {
      if (autoChatRef.current) {
        clearInterval(autoChatRef.current)
      }
    }

    return () => {
      if (autoChatRef.current) {
        clearInterval(autoChatRef.current)
      }
    }
  }, [isAutoChat, chatSpeed, messages])

  // Bob –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Alice
  useEffect(() => {
    const lastMessage = messages.alice.length > 0 ? messages.alice[messages.alice.length - 1] : null
    
    if (lastMessage && lastMessage.sender === 'alice' && isAutoChat) {
      const timeout = setTimeout(() => {
        const response = botResponses.bob[Math.floor(Math.random() * botResponses.bob.length)]
        addMessage('bob', response, 'bob')
      }, chatSpeed / 2) // Bob –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ

      return () => clearTimeout(timeout)
    }
  }, [messages.alice, isAutoChat, chatSpeed])

  const addMessage = (chatId, text, sender) => {
    const newMessage = {
      id: Date.now(),
      text,
      sender,
      timestamp: new Date().toLocaleTimeString()
    }
    
    setMessages(prev => ({
      ...prev,
      [chatId]: [...prev[chatId], newMessage]
    }))
  }

  const handleSendMessage = (chatId) => {
    const message = inputMessages[chatId].trim()
    if (message) {
      addMessage(chatId, message, 'user')
      setInputMessages(prev => ({
        ...prev,
        [chatId]: ''
      }))
    }
  }

  const handleKeyPress = (e, chatId) => {
    if (e.key === 'Enter') {
      handleSendMessage(chatId)
    }
  }

  const clearChat = (chatId) => {
    setMessages(prev => ({
      ...prev,
      [chatId]: []
    }))
  }

  return (
    <div className="app">
      <header className="header">
        <h1>ü§ñ AI Chat Demo</h1>
        <div className="controls">
          <button 
            className={`control-btn ${isAutoChat ? 'active' : ''}`}
            onClick={() => setIsAutoChat(!isAutoChat)}
          >
            {isAutoChat ? '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å'} –∞–≤—Ç–æ—á–∞—Ç
          </button>
          <select 
            value={chatSpeed} 
            onChange={(e) => setChatSpeed(Number(e.target.value))}
            className="speed-select"
          >
            <option value={1000}>–ë—ã—Å—Ç—Ä–æ (1—Å)</option>
            <option value={3000}>–°—Ä–µ–¥–Ω–µ (3—Å)</option>
            <option value={5000}>–ú–µ–¥–ª–µ–Ω–Ω–æ (5—Å)</option>
          </select>
        </div>
      </header>

      <div className="chat-container">
        {/* Alice Chat */}
        <div className="chat-window">
          <div className="chat-header">
            <h2>üë© Alice</h2>
            <button 
              className="clear-btn"
              onClick={() => clearChat('alice')}
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
          
          <div className="messages">
            {messages.alice.map((message) => (
              <div 
                key={message.id} 
                className={`message ${message.sender === 'user' ? 'user-message' : 'ai-message'}`}
              >
                <div className="message-text">{message.text}</div>
                <div className="message-time">{message.timestamp}</div>
              </div>
            ))}
          </div>
          
          <div className="input-area">
            <input
              type="text"
              value={inputMessages.alice}
              onChange={(e) => setInputMessages(prev => ({...prev, alice: e.target.value}))}
              onKeyPress={(e) => handleKeyPress(e, 'alice')}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Alice..."
              className="message-input"
            />
            <button 
              onClick={() => handleSendMessage('alice')}
              className="send-btn"
            >
              üì§
            </button>
          </div>
        </div>

        {/* Bob Chat */}
        <div className="chat-window">
          <div className="chat-header">
            <h2>üë® Bob</h2>
            <button 
              className="clear-btn"
              onClick={() => clearChat('bob')}
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
          
          <div className="messages">
            {messages.bob.map((message) => (
              <div 
                key={message.id} 
                className={`message ${message.sender === 'user' ? 'user-message' : 'ai-message'}`}
              >
                <div className="message-text">{message.text}</div>
                <div className="message-time">{message.timestamp}</div>
              </div>
            ))}
          </div>
          
          <div className="input-area">
            <input
              type="text"
              value={inputMessages.bob}
              onChange={(e) => setInputMessages(prev => ({...prev, bob: e.target.value}))}
              onKeyPress={(e) => handleKeyPress(e, 'bob')}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Bob..."
              className="message-input"
            />
            <button 
              onClick={() => handleSendMessage('bob')}
              className="send-btn"
            >
              üì§
            </button>
          </div>
        </div>
      </div>

      <footer className="footer">
        <p>üí° –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –¥–∏–∞–ª–æ–≥–æ–º –∏–ª–∏ –≤–º–µ—à–∏–≤–∞–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏—è!</p>
      </footer>
    </div>
  )
}

export default App